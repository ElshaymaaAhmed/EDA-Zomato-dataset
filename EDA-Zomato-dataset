{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f506bc8f",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:24.354024Z",
     "iopub.status.busy": "2024-08-31T09:43:24.352958Z",
     "iopub.status.idle": "2024-08-31T09:43:26.423031Z",
     "shell.execute_reply": "2024-08-31T09:43:26.421763Z"
    },
    "papermill": {
     "duration": 2.085304,
     "end_time": "2024-08-31T09:43:26.425508",
     "exception": false,
     "start_time": "2024-08-31T09:43:24.340204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "940e42d3",
   "metadata": {
    "papermill": {
     "duration": 0.010187,
     "end_time": "2024-08-31T09:43:26.446494",
     "exception": false,
     "start_time": "2024-08-31T09:43:26.436307",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Reading the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7700dec7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:26.469809Z",
     "iopub.status.busy": "2024-08-31T09:43:26.468827Z",
     "iopub.status.idle": "2024-08-31T09:43:38.913801Z",
     "shell.execute_reply": "2024-08-31T09:43:38.912610Z"
    },
    "papermill": {
     "duration": 12.459167,
     "end_time": "2024-08-31T09:43:38.916046",
     "exception": false,
     "start_time": "2024-08-31T09:43:26.456879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>url</th>\n",
       "      <th>address</th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>phone</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>dish_liked</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>reviews_list</th>\n",
       "      <th>menu_item</th>\n",
       "      <th>listed_in(type)</th>\n",
       "      <th>listed_in(city)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>https://www.zomato.com/bangalore/jalsa-banasha...</td>\n",
       "      <td>942, 21st Main Road, 2nd Stage, Banashankari, ...</td>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1/5</td>\n",
       "      <td>775</td>\n",
       "      <td>080 42297555\\r\\n+91 9743772233</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Pasta, Lunch Buffet, Masala Papad, Paneer Laja...</td>\n",
       "      <td>North Indian, Mughlai, Chinese</td>\n",
       "      <td>800</td>\n",
       "      <td>[('Rated 4.0', 'RATED\\n  A beautiful place to ...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Buffet</td>\n",
       "      <td>Banashankari</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>https://www.zomato.com/bangalore/spice-elephan...</td>\n",
       "      <td>2nd Floor, 80 Feet Road, Near Big Bazaar, 6th ...</td>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1/5</td>\n",
       "      <td>787</td>\n",
       "      <td>080 41714161</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Momos, Lunch Buffet, Chocolate Nirvana, Thai G...</td>\n",
       "      <td>Chinese, North Indian, Thai</td>\n",
       "      <td>800</td>\n",
       "      <td>[('Rated 4.0', 'RATED\\n  Had been here for din...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Buffet</td>\n",
       "      <td>Banashankari</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>https://www.zomato.com/SanchurroBangalore?cont...</td>\n",
       "      <td>1112, Next to KIMS Medical College, 17th Cross...</td>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8/5</td>\n",
       "      <td>918</td>\n",
       "      <td>+91 9663487993</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Cafe, Casual Dining</td>\n",
       "      <td>Churros, Cannelloni, Minestrone Soup, Hot Choc...</td>\n",
       "      <td>Cafe, Mexican, Italian</td>\n",
       "      <td>800</td>\n",
       "      <td>[('Rated 3.0', \"RATED\\n  Ambience is not that ...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Buffet</td>\n",
       "      <td>Banashankari</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>https://www.zomato.com/bangalore/addhuri-udupi...</td>\n",
       "      <td>1st Floor, Annakuteera, 3rd Stage, Banashankar...</td>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7/5</td>\n",
       "      <td>88</td>\n",
       "      <td>+91 9620009302</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>Masala Dosa</td>\n",
       "      <td>South Indian, North Indian</td>\n",
       "      <td>300</td>\n",
       "      <td>[('Rated 4.0', \"RATED\\n  Great food and proper...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Buffet</td>\n",
       "      <td>Banashankari</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>https://www.zomato.com/bangalore/grand-village...</td>\n",
       "      <td>10, 3rd Floor, Lakshmi Associates, Gandhi Baza...</td>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8/5</td>\n",
       "      <td>166</td>\n",
       "      <td>+91 8026612447\\r\\n+91 9901210005</td>\n",
       "      <td>Basavanagudi</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Panipuri, Gol Gappe</td>\n",
       "      <td>North Indian, Rajasthani</td>\n",
       "      <td>600</td>\n",
       "      <td>[('Rated 4.0', 'RATED\\n  Very good restaurant ...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Buffet</td>\n",
       "      <td>Banashankari</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 url  \\\n",
       "0  https://www.zomato.com/bangalore/jalsa-banasha...   \n",
       "1  https://www.zomato.com/bangalore/spice-elephan...   \n",
       "2  https://www.zomato.com/SanchurroBangalore?cont...   \n",
       "3  https://www.zomato.com/bangalore/addhuri-udupi...   \n",
       "4  https://www.zomato.com/bangalore/grand-village...   \n",
       "\n",
       "                                             address                   name  \\\n",
       "0  942, 21st Main Road, 2nd Stage, Banashankari, ...                  Jalsa   \n",
       "1  2nd Floor, 80 Feet Road, Near Big Bazaar, 6th ...         Spice Elephant   \n",
       "2  1112, Next to KIMS Medical College, 17th Cross...        San Churro Cafe   \n",
       "3  1st Floor, Annakuteera, 3rd Stage, Banashankar...  Addhuri Udupi Bhojana   \n",
       "4  10, 3rd Floor, Lakshmi Associates, Gandhi Baza...          Grand Village   \n",
       "\n",
       "  online_order book_table   rate  votes                             phone  \\\n",
       "0          Yes        Yes  4.1/5    775    080 42297555\\r\\n+91 9743772233   \n",
       "1          Yes         No  4.1/5    787                      080 41714161   \n",
       "2          Yes         No  3.8/5    918                    +91 9663487993   \n",
       "3           No         No  3.7/5     88                    +91 9620009302   \n",
       "4           No         No  3.8/5    166  +91 8026612447\\r\\n+91 9901210005   \n",
       "\n",
       "       location            rest_type  \\\n",
       "0  Banashankari        Casual Dining   \n",
       "1  Banashankari        Casual Dining   \n",
       "2  Banashankari  Cafe, Casual Dining   \n",
       "3  Banashankari          Quick Bites   \n",
       "4  Basavanagudi        Casual Dining   \n",
       "\n",
       "                                          dish_liked  \\\n",
       "0  Pasta, Lunch Buffet, Masala Papad, Paneer Laja...   \n",
       "1  Momos, Lunch Buffet, Chocolate Nirvana, Thai G...   \n",
       "2  Churros, Cannelloni, Minestrone Soup, Hot Choc...   \n",
       "3                                        Masala Dosa   \n",
       "4                                Panipuri, Gol Gappe   \n",
       "\n",
       "                         cuisines approx_cost(for two people)  \\\n",
       "0  North Indian, Mughlai, Chinese                         800   \n",
       "1     Chinese, North Indian, Thai                         800   \n",
       "2          Cafe, Mexican, Italian                         800   \n",
       "3      South Indian, North Indian                         300   \n",
       "4        North Indian, Rajasthani                         600   \n",
       "\n",
       "                                        reviews_list menu_item  \\\n",
       "0  [('Rated 4.0', 'RATED\\n  A beautiful place to ...        []   \n",
       "1  [('Rated 4.0', 'RATED\\n  Had been here for din...        []   \n",
       "2  [('Rated 3.0', \"RATED\\n  Ambience is not that ...        []   \n",
       "3  [('Rated 4.0', \"RATED\\n  Great food and proper...        []   \n",
       "4  [('Rated 4.0', 'RATED\\n  Very good restaurant ...        []   \n",
       "\n",
       "  listed_in(type) listed_in(city)  \n",
       "0          Buffet    Banashankari  \n",
       "1          Buffet    Banashankari  \n",
       "2          Buffet    Banashankari  \n",
       "3          Buffet    Banashankari  \n",
       "4          Buffet    Banashankari  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/zomato-bangalore-restaurants/zomato.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8f146700",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:38.939994Z",
     "iopub.status.busy": "2024-08-31T09:43:38.939274Z",
     "iopub.status.idle": "2024-08-31T09:43:38.945979Z",
     "shell.execute_reply": "2024-08-31T09:43:38.944907Z"
    },
    "papermill": {
     "duration": 0.02104,
     "end_time": "2024-08-31T09:43:38.948236",
     "exception": false,
     "start_time": "2024-08-31T09:43:38.927196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(51717, 17)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5a6a1a69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:38.971503Z",
     "iopub.status.busy": "2024-08-31T09:43:38.971129Z",
     "iopub.status.idle": "2024-08-31T09:43:38.978876Z",
     "shell.execute_reply": "2024-08-31T09:43:38.977763Z"
    },
    "papermill": {
     "duration": 0.022057,
     "end_time": "2024-08-31T09:43:38.981139",
     "exception": false,
     "start_time": "2024-08-31T09:43:38.959082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['url', 'address', 'name', 'online_order', 'book_table', 'rate', 'votes',\n",
       "       'phone', 'location', 'rest_type', 'dish_liked', 'cuisines',\n",
       "       'approx_cost(for two people)', 'reviews_list', 'menu_item',\n",
       "       'listed_in(type)', 'listed_in(city)'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69652377",
   "metadata": {
    "papermill": {
     "duration": 0.010986,
     "end_time": "2024-08-31T09:43:39.003376",
     "exception": false,
     "start_time": "2024-08-31T09:43:38.992390",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Dropping columns not going to use it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cf1b2bbb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.027611Z",
     "iopub.status.busy": "2024-08-31T09:43:39.027231Z",
     "iopub.status.idle": "2024-08-31T09:43:39.051592Z",
     "shell.execute_reply": "2024-08-31T09:43:39.050395Z"
    },
    "papermill": {
     "duration": 0.03934,
     "end_time": "2024-08-31T09:43:39.054251",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.014911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>listed_in(type)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1/5</td>\n",
       "      <td>775</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>North Indian, Mughlai, Chinese</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1/5</td>\n",
       "      <td>787</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Chinese, North Indian, Thai</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8/5</td>\n",
       "      <td>918</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Cafe, Casual Dining</td>\n",
       "      <td>Cafe, Mexican, Italian</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7/5</td>\n",
       "      <td>88</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>South Indian, North Indian</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8/5</td>\n",
       "      <td>166</td>\n",
       "      <td>Basavanagudi</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>North Indian, Rajasthani</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table   rate  votes      location  \\\n",
       "0                  Jalsa          Yes        Yes  4.1/5    775  Banashankari   \n",
       "1         Spice Elephant          Yes         No  4.1/5    787  Banashankari   \n",
       "2        San Churro Cafe          Yes         No  3.8/5    918  Banashankari   \n",
       "3  Addhuri Udupi Bhojana           No         No  3.7/5     88  Banashankari   \n",
       "4          Grand Village           No         No  3.8/5    166  Basavanagudi   \n",
       "\n",
       "             rest_type                        cuisines  \\\n",
       "0        Casual Dining  North Indian, Mughlai, Chinese   \n",
       "1        Casual Dining     Chinese, North Indian, Thai   \n",
       "2  Cafe, Casual Dining          Cafe, Mexican, Italian   \n",
       "3          Quick Bites      South Indian, North Indian   \n",
       "4        Casual Dining        North Indian, Rajasthani   \n",
       "\n",
       "  approx_cost(for two people) listed_in(type)  \n",
       "0                         800          Buffet  \n",
       "1                         800          Buffet  \n",
       "2                         800          Buffet  \n",
       "3                         300          Buffet  \n",
       "4                         600          Buffet  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.drop(['url', 'address', 'phone', 'menu_item', 'dish_liked', 'reviews_list', 'listed_in(city)'], axis = 1)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e40bb4dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.078792Z",
     "iopub.status.busy": "2024-08-31T09:43:39.078398Z",
     "iopub.status.idle": "2024-08-31T09:43:39.122552Z",
     "shell.execute_reply": "2024-08-31T09:43:39.121258Z"
    },
    "papermill": {
     "duration": 0.059175,
     "end_time": "2024-08-31T09:43:39.125056",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.065881",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 51717 entries, 0 to 51716\n",
      "Data columns (total 10 columns):\n",
      " #   Column                       Non-Null Count  Dtype \n",
      "---  ------                       --------------  ----- \n",
      " 0   name                         51717 non-null  object\n",
      " 1   online_order                 51717 non-null  object\n",
      " 2   book_table                   51717 non-null  object\n",
      " 3   rate                         43942 non-null  object\n",
      " 4   votes                        51717 non-null  int64 \n",
      " 5   location                     51696 non-null  object\n",
      " 6   rest_type                    51490 non-null  object\n",
      " 7   cuisines                     51672 non-null  object\n",
      " 8   approx_cost(for two people)  51371 non-null  object\n",
      " 9   listed_in(type)              51717 non-null  object\n",
      "dtypes: int64(1), object(9)\n",
      "memory usage: 3.9+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45993b41",
   "metadata": {
    "papermill": {
     "duration": 0.01109,
     "end_time": "2024-08-31T09:43:39.147606",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.136516",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Dropping duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e1fcb71e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.172588Z",
     "iopub.status.busy": "2024-08-31T09:43:39.172171Z",
     "iopub.status.idle": "2024-08-31T09:43:39.229373Z",
     "shell.execute_reply": "2024-08-31T09:43:39.228308Z"
    },
    "papermill": {
     "duration": 0.072524,
     "end_time": "2024-08-31T09:43:39.231836",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.159312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(35011, 10)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop_duplicates(inplace = True)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d065b795",
   "metadata": {
    "papermill": {
     "duration": 0.011063,
     "end_time": "2024-08-31T09:43:39.254466",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.243403",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Dropping null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c760618d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.279491Z",
     "iopub.status.busy": "2024-08-31T09:43:39.278534Z",
     "iopub.status.idle": "2024-08-31T09:43:39.314405Z",
     "shell.execute_reply": "2024-08-31T09:43:39.313333Z"
    },
    "papermill": {
     "duration": 0.050877,
     "end_time": "2024-08-31T09:43:39.316746",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.265869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>listed_in(type)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1/5</td>\n",
       "      <td>775</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>North Indian, Mughlai, Chinese</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1/5</td>\n",
       "      <td>787</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Chinese, North Indian, Thai</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8/5</td>\n",
       "      <td>918</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Cafe, Casual Dining</td>\n",
       "      <td>Cafe, Mexican, Italian</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7/5</td>\n",
       "      <td>88</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>South Indian, North Indian</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8/5</td>\n",
       "      <td>166</td>\n",
       "      <td>Basavanagudi</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>North Indian, Rajasthani</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table   rate  votes      location  \\\n",
       "0                  Jalsa          Yes        Yes  4.1/5    775  Banashankari   \n",
       "1         Spice Elephant          Yes         No  4.1/5    787  Banashankari   \n",
       "2        San Churro Cafe          Yes         No  3.8/5    918  Banashankari   \n",
       "3  Addhuri Udupi Bhojana           No         No  3.7/5     88  Banashankari   \n",
       "4          Grand Village           No         No  3.8/5    166  Basavanagudi   \n",
       "\n",
       "             rest_type                        cuisines  \\\n",
       "0        Casual Dining  North Indian, Mughlai, Chinese   \n",
       "1        Casual Dining     Chinese, North Indian, Thai   \n",
       "2  Cafe, Casual Dining          Cafe, Mexican, Italian   \n",
       "3          Quick Bites      South Indian, North Indian   \n",
       "4        Casual Dining        North Indian, Rajasthani   \n",
       "\n",
       "  approx_cost(for two people) listed_in(type)  \n",
       "0                         800          Buffet  \n",
       "1                         800          Buffet  \n",
       "2                         800          Buffet  \n",
       "3                         300          Buffet  \n",
       "4                         600          Buffet  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna(inplace = True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57c4971a",
   "metadata": {
    "papermill": {
     "duration": 0.011774,
     "end_time": "2024-08-31T09:43:39.340285",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.328511",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Rename some columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8ed8ae1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.365357Z",
     "iopub.status.busy": "2024-08-31T09:43:39.364948Z",
     "iopub.status.idle": "2024-08-31T09:43:39.380740Z",
     "shell.execute_reply": "2024-08-31T09:43:39.379725Z"
    },
    "papermill": {
     "duration": 0.03081,
     "end_time": "2024-08-31T09:43:39.382868",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.352058",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>Cost_for_2people</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1/5</td>\n",
       "      <td>775</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>North Indian, Mughlai, Chinese</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1/5</td>\n",
       "      <td>787</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Chinese, North Indian, Thai</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8/5</td>\n",
       "      <td>918</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Cafe, Casual Dining</td>\n",
       "      <td>Cafe, Mexican, Italian</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7/5</td>\n",
       "      <td>88</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>South Indian, North Indian</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8/5</td>\n",
       "      <td>166</td>\n",
       "      <td>Basavanagudi</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>North Indian, Rajasthani</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table   rate  votes      location  \\\n",
       "0                  Jalsa          Yes        Yes  4.1/5    775  Banashankari   \n",
       "1         Spice Elephant          Yes         No  4.1/5    787  Banashankari   \n",
       "2        San Churro Cafe          Yes         No  3.8/5    918  Banashankari   \n",
       "3  Addhuri Udupi Bhojana           No         No  3.7/5     88  Banashankari   \n",
       "4          Grand Village           No         No  3.8/5    166  Basavanagudi   \n",
       "\n",
       "             rest_type                        cuisines Cost_for_2people  \\\n",
       "0        Casual Dining  North Indian, Mughlai, Chinese              800   \n",
       "1        Casual Dining     Chinese, North Indian, Thai              800   \n",
       "2  Cafe, Casual Dining          Cafe, Mexican, Italian              800   \n",
       "3          Quick Bites      South Indian, North Indian              300   \n",
       "4        Casual Dining        North Indian, Rajasthani              600   \n",
       "\n",
       "     Type  \n",
       "0  Buffet  \n",
       "1  Buffet  \n",
       "2  Buffet  \n",
       "3  Buffet  \n",
       "4  Buffet  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rename(columns = {'approx_cost(for two people)':'Cost_for_2people', 'listed_in(type)':'Type'}, inplace = True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70134b0c",
   "metadata": {
    "papermill": {
     "duration": 0.012452,
     "end_time": "2024-08-31T09:43:39.407986",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.395534",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Cleaning the 'Rate' column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c9c99027",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.434834Z",
     "iopub.status.busy": "2024-08-31T09:43:39.434398Z",
     "iopub.status.idle": "2024-08-31T09:43:39.443531Z",
     "shell.execute_reply": "2024-08-31T09:43:39.442290Z"
    },
    "papermill": {
     "duration": 0.025094,
     "end_time": "2024-08-31T09:43:39.445958",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.420864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['4.1/5', '3.8/5', '3.7/5', '3.6/5', '4.6/5', '4.0/5', '4.2/5',\n",
       "       '3.9/5', '3.1/5', '3.0/5', '3.2/5', '3.3/5', '2.8/5', '4.4/5',\n",
       "       '4.3/5', 'NEW', '2.9/5', '3.5/5', '2.6/5', '3.8 /5', '3.4/5',\n",
       "       '4.5/5', '2.5/5', '2.7/5', '4.7/5', '2.4/5', '2.2/5', '2.3/5',\n",
       "       '3.4 /5', '-', '3.6 /5', '4.8/5', '3.9 /5', '4.2 /5', '4.0 /5',\n",
       "       '4.1 /5', '3.7 /5', '3.1 /5', '2.9 /5', '3.3 /5', '2.8 /5',\n",
       "       '3.5 /5', '2.7 /5', '2.5 /5', '3.2 /5', '2.6 /5', '4.5 /5',\n",
       "       '4.3 /5', '4.4 /5', '4.9/5', '2.1/5', '2.0/5', '1.8/5', '4.6 /5',\n",
       "       '4.9 /5', '3.0 /5', '4.8 /5', '2.3 /5', '4.7 /5', '2.4 /5',\n",
       "       '2.1 /5', '2.2 /5', '2.0 /5', '1.8 /5'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rate'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3b50b46",
   "metadata": {
    "papermill": {
     "duration": 0.012098,
     "end_time": "2024-08-31T09:43:39.470978",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.458880",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Remove wrong values -->'NEW', '-'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6d67f6dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.498655Z",
     "iopub.status.busy": "2024-08-31T09:43:39.497906Z",
     "iopub.status.idle": "2024-08-31T09:43:39.532176Z",
     "shell.execute_reply": "2024-08-31T09:43:39.531132Z"
    },
    "papermill": {
     "duration": 0.050375,
     "end_time": "2024-08-31T09:43:39.534539",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.484164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    4.1\n",
       "1    4.1\n",
       "2    3.8\n",
       "3    3.7\n",
       "4    3.8\n",
       "Name: rate, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def clean_rate(value):\n",
    "    if(value=='NEW' or value=='-'):\n",
    "        return np.nan\n",
    "    else:\n",
    "        value = str(value).split('/')\n",
    "        value = value[0]\n",
    "        return float(value)\n",
    "    \n",
    "df['rate'] = df['rate'].apply(clean_rate)\n",
    "df['rate'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "722eb4f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.563547Z",
     "iopub.status.busy": "2024-08-31T09:43:39.563178Z",
     "iopub.status.idle": "2024-08-31T09:43:39.573078Z",
     "shell.execute_reply": "2024-08-31T09:43:39.571899Z"
    },
    "papermill": {
     "duration": 0.026443,
     "end_time": "2024-08-31T09:43:39.575544",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.549101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/3510688104.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df['rate'].fillna(df['rate'].mean(), inplace = True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filling null values in the 'Rate' column with Mean\n",
    "df['rate'].fillna(df['rate'].mean(), inplace = True)\n",
    "df['rate'].isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8109d4d",
   "metadata": {
    "papermill": {
     "duration": 0.012407,
     "end_time": "2024-08-31T09:43:39.600266",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.587859",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. Cleaning 'location' column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f5232924",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.626526Z",
     "iopub.status.busy": "2024-08-31T09:43:39.626154Z",
     "iopub.status.idle": "2024-08-31T09:43:39.637412Z",
     "shell.execute_reply": "2024-08-31T09:43:39.636279Z"
    },
    "papermill": {
     "duration": 0.027182,
     "end_time": "2024-08-31T09:43:39.639742",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.612560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location\n",
       "BTM                      2228\n",
       "Indiranagar              1653\n",
       "Whitefield               1630\n",
       "Koramangala 5th Block    1577\n",
       "HSR                      1558\n",
       "                         ... \n",
       "Central Bangalore           5\n",
       "Yelahanka                   4\n",
       "Rajarajeshwari Nagar        2\n",
       "Nagarbhavi                  1\n",
       "Peenya                      1\n",
       "Name: count, Length: 92, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['location'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "553a7b26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.667571Z",
     "iopub.status.busy": "2024-08-31T09:43:39.667206Z",
     "iopub.status.idle": "2024-08-31T09:43:39.679166Z",
     "shell.execute_reply": "2024-08-31T09:43:39.678152Z"
    },
    "papermill": {
     "duration": 0.028397,
     "end_time": "2024-08-31T09:43:39.681231",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.652834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location\n",
       "Vasanth Nagar                    163\n",
       "Commercial Street                153\n",
       "Thippasandra                     144\n",
       "Basaveshwara Nagar               132\n",
       "Koramangala 8th Block            128\n",
       "Bommanahalli                     124\n",
       "Koramangala 3rd Block            123\n",
       "Ejipura                          120\n",
       "Shivajinagar                     119\n",
       "Kumaraswamy Layout               115\n",
       "Wilson Garden                    109\n",
       "Nagawara                         103\n",
       "Seshadripuram                    100\n",
       "Race Course Road                  93\n",
       "Majestic                          92\n",
       "Yeshwantpur                       88\n",
       "Hennur                            86\n",
       "Varthur Main Road, Whitefield     85\n",
       "ITPL Main Road, Whitefield        83\n",
       "Infantry Road                     81\n",
       "HBR Layout                        77\n",
       "Kaggadasapura                     73\n",
       "Vijay Nagar                       66\n",
       "CV Raman Nagar                    63\n",
       "Sadashiv Nagar                    57\n",
       "City Market                       56\n",
       "RT Nagar                          54\n",
       "Sanjay Nagar                      48\n",
       "Sahakara Nagar                    47\n",
       "South Bangalore                   44\n",
       "Koramangala 2nd Block             44\n",
       "Hosur Road                        39\n",
       "East Bangalore                    27\n",
       "Magadi Road                       24\n",
       "Jalahalli                         23\n",
       "Sankey Road                       20\n",
       "Kanakapura Road                   19\n",
       "Old Madras Road                   18\n",
       "Koramangala                       17\n",
       "Mysore Road                       17\n",
       "Langford Town                     16\n",
       "Rammurthy Nagar                   16\n",
       "KR Puram                          11\n",
       "Hebbal                            10\n",
       "North Bangalore                   10\n",
       "Uttarahalli                        9\n",
       "Kengeri                            5\n",
       "West Bangalore                     5\n",
       "Central Bangalore                  5\n",
       "Yelahanka                          4\n",
       "Rajarajeshwari Nagar               2\n",
       "Nagarbhavi                         1\n",
       "Peenya                             1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "location = df['location'].value_counts(ascending  = False)\n",
    "\n",
    "location_lessthan200 = location[location<200]\n",
    "location_lessthan200"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a3254f6",
   "metadata": {
    "papermill": {
     "duration": 0.013134,
     "end_time": "2024-08-31T09:43:39.706995",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.693861",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Group all 'location' values with a frequency of less than 200 into one category named \"Others.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6b5d49a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.735551Z",
     "iopub.status.busy": "2024-08-31T09:43:39.735170Z",
     "iopub.status.idle": "2024-08-31T09:43:39.814145Z",
     "shell.execute_reply": "2024-08-31T09:43:39.813024Z"
    },
    "papermill": {
     "duration": 0.096103,
     "end_time": "2024-08-31T09:43:39.816622",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.720519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location\n",
       "others                   3169\n",
       "BTM                      2228\n",
       "Indiranagar              1653\n",
       "Whitefield               1630\n",
       "Koramangala 5th Block    1577\n",
       "HSR                      1558\n",
       "Marathahalli             1415\n",
       "JP Nagar                 1221\n",
       "Jayanagar                1154\n",
       "Bellandur                1001\n",
       "Electronic City           937\n",
       "Bannerghatta Road         907\n",
       "Sarjapur Road             838\n",
       "Brigade Road              653\n",
       "Koramangala 7th Block     604\n",
       "Koramangala 6th Block     580\n",
       "Koramangala 4th Block     548\n",
       "Brookefield               548\n",
       "MG Road                   538\n",
       "Kalyan Nagar              530\n",
       "Malleshwaram              519\n",
       "Ulsoor                    513\n",
       "Banashankari              502\n",
       "New BEL Road              472\n",
       "Koramangala 1st Block     472\n",
       "Church Street             440\n",
       "Basavanagudi              431\n",
       "Residency Road            407\n",
       "Frazer Town               401\n",
       "Rajajinagar               390\n",
       "Lavelle Road              386\n",
       "Old Airport Road          366\n",
       "Kammanahalli              351\n",
       "Richmond Road             348\n",
       "Banaswadi                 344\n",
       "Domlur                    321\n",
       "Cunningham Road           284\n",
       "Jeevan Bhima Nagar        252\n",
       "St. Marks Road            242\n",
       "Shanti Nagar              228\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def handle_location(value):\n",
    "    if(value in location_lessthan200):\n",
    "        return 'others'\n",
    "    else:\n",
    "        return value\n",
    "    \n",
    "df['location'] = df['location'].apply(handle_location)\n",
    "df['location'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1dd0d4aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.844355Z",
     "iopub.status.busy": "2024-08-31T09:43:39.843969Z",
     "iopub.status.idle": "2024-08-31T09:43:39.859736Z",
     "shell.execute_reply": "2024-08-31T09:43:39.858656Z"
    },
    "papermill": {
     "duration": 0.032244,
     "end_time": "2024-08-31T09:43:39.861991",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.829747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>Cost_for_2people</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1</td>\n",
       "      <td>775</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>North Indian, Mughlai, Chinese</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1</td>\n",
       "      <td>787</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Chinese, North Indian, Thai</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>918</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Cafe, Casual Dining</td>\n",
       "      <td>Cafe, Mexican, Italian</td>\n",
       "      <td>800</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7</td>\n",
       "      <td>88</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>South Indian, North Indian</td>\n",
       "      <td>300</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>166</td>\n",
       "      <td>Basavanagudi</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>North Indian, Rajasthani</td>\n",
       "      <td>600</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table  rate  votes      location  \\\n",
       "0                  Jalsa          Yes        Yes   4.1    775  Banashankari   \n",
       "1         Spice Elephant          Yes         No   4.1    787  Banashankari   \n",
       "2        San Churro Cafe          Yes         No   3.8    918  Banashankari   \n",
       "3  Addhuri Udupi Bhojana           No         No   3.7     88  Banashankari   \n",
       "4          Grand Village           No         No   3.8    166  Basavanagudi   \n",
       "\n",
       "             rest_type                        cuisines Cost_for_2people  \\\n",
       "0        Casual Dining  North Indian, Mughlai, Chinese              800   \n",
       "1        Casual Dining     Chinese, North Indian, Thai              800   \n",
       "2  Cafe, Casual Dining          Cafe, Mexican, Italian              800   \n",
       "3          Quick Bites      South Indian, North Indian              300   \n",
       "4        Casual Dining        North Indian, Rajasthani              600   \n",
       "\n",
       "     Type  \n",
       "0  Buffet  \n",
       "1  Buffet  \n",
       "2  Buffet  \n",
       "3  Buffet  \n",
       "4  Buffet  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "211e232b",
   "metadata": {
    "papermill": {
     "duration": 0.012792,
     "end_time": "2024-08-31T09:43:39.888246",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.875454",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. Cleaning the 'rest_type' column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a329c019",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.916894Z",
     "iopub.status.busy": "2024-08-31T09:43:39.916465Z",
     "iopub.status.idle": "2024-08-31T09:43:39.928152Z",
     "shell.execute_reply": "2024-08-31T09:43:39.926999Z"
    },
    "papermill": {
     "duration": 0.028307,
     "end_time": "2024-08-31T09:43:39.930386",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.902079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rest_type\n",
       "Quick Bites                   10143\n",
       "Casual Dining                  7311\n",
       "Cafe                           2495\n",
       "Dessert Parlor                 1357\n",
       "Delivery                       1117\n",
       "                              ...  \n",
       "Dessert Parlor, Kiosk             2\n",
       "Bakery, Food Court                2\n",
       "Food Court, Beverage Shop         2\n",
       "Quick Bites, Kiosk                1\n",
       "Dessert Parlor, Food Court        1\n",
       "Name: count, Length: 87, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rest_types = df['rest_type'].value_counts(ascending  = False)\n",
    "rest_types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "384da0f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:39.958927Z",
     "iopub.status.busy": "2024-08-31T09:43:39.958487Z",
     "iopub.status.idle": "2024-08-31T09:43:39.967519Z",
     "shell.execute_reply": "2024-08-31T09:43:39.966466Z"
    },
    "papermill": {
     "duration": 0.025595,
     "end_time": "2024-08-31T09:43:39.969635",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.944040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rest_type\n",
       "Takeaway, Delivery            965\n",
       "Casual Dining, Bar            940\n",
       "Bakery                        547\n",
       "Bar                           456\n",
       "Beverage Shop                 417\n",
       "                             ... \n",
       "Dessert Parlor, Kiosk           2\n",
       "Bakery, Food Court              2\n",
       "Food Court, Beverage Shop       2\n",
       "Quick Bites, Kiosk              1\n",
       "Dessert Parlor, Food Court      1\n",
       "Name: count, Length: 82, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rest_types_lessthan1000 = rest_types[rest_types<1000]\n",
    "rest_types_lessthan1000"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3ab93f4",
   "metadata": {
    "papermill": {
     "duration": 0.01384,
     "end_time": "2024-08-31T09:43:39.996895",
     "exception": false,
     "start_time": "2024-08-31T09:43:39.983055",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Group all rest-type values with a frequency of less than 1000 into one category named \"others\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1e40d392",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:40.026131Z",
     "iopub.status.busy": "2024-08-31T09:43:40.025729Z",
     "iopub.status.idle": "2024-08-31T09:43:40.099365Z",
     "shell.execute_reply": "2024-08-31T09:43:40.098281Z"
    },
    "papermill": {
     "duration": 0.090915,
     "end_time": "2024-08-31T09:43:40.101751",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.010836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rest_type\n",
       "Quick Bites       10143\n",
       "others             8535\n",
       "Casual Dining      7311\n",
       "Cafe               2495\n",
       "Dessert Parlor     1357\n",
       "Delivery           1117\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def handle_rest_type(value):\n",
    "    if(value in rest_types_lessthan1000):\n",
    "        return 'others'\n",
    "    else:\n",
    "        return value\n",
    "        \n",
    "df['rest_type'] = df['rest_type'].apply(handle_rest_type)\n",
    "df['rest_type'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8c06004",
   "metadata": {
    "papermill": {
     "duration": 0.014423,
     "end_time": "2024-08-31T09:43:40.129562",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.115139",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4. Cleaning 'Cost_for_2people' column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "17cd1a16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:40.159693Z",
     "iopub.status.busy": "2024-08-31T09:43:40.159269Z",
     "iopub.status.idle": "2024-08-31T09:43:40.168430Z",
     "shell.execute_reply": "2024-08-31T09:43:40.167346Z"
    },
    "papermill": {
     "duration": 0.026611,
     "end_time": "2024-08-31T09:43:40.170717",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.144106",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['800', '300', '600', '700', '550', '500', '450', '650', '400',\n",
       "       '900', '200', '750', '150', '850', '100', '1,200', '350', '250',\n",
       "       '950', '1,000', '1,500', '1,300', '199', '80', '1,100', '160',\n",
       "       '1,600', '230', '130', '1,700', '1,400', '1,350', '2,200', '2,000',\n",
       "       '1,800', '1,900', '180', '330', '2,500', '2,100', '3,000', '2,800',\n",
       "       '3,400', '50', '40', '1,250', '3,500', '4,000', '2,400', '2,600',\n",
       "       '1,450', '70', '3,200', '560', '240', '360', '6,000', '1,050',\n",
       "       '2,300', '4,100', '120', '5,000', '3,700', '1,650', '2,700',\n",
       "       '4,500'], dtype=object)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Cost_for_2people'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02c530ab",
   "metadata": {
    "papermill": {
     "duration": 0.014637,
     "end_time": "2024-08-31T09:43:40.199559",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.184922",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Removing comma from 'Cost_for_2people' column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "99e5e341",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:40.230146Z",
     "iopub.status.busy": "2024-08-31T09:43:40.229628Z",
     "iopub.status.idle": "2024-08-31T09:43:40.258205Z",
     "shell.execute_reply": "2024-08-31T09:43:40.257057Z"
    },
    "papermill": {
     "duration": 0.046687,
     "end_time": "2024-08-31T09:43:40.260514",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.213827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 800.,  300.,  600.,  700.,  550.,  500.,  450.,  650.,  400.,\n",
       "        900.,  200.,  750.,  150.,  850.,  100., 1200.,  350.,  250.,\n",
       "        950., 1000., 1500., 1300.,  199.,   80., 1100.,  160., 1600.,\n",
       "        230.,  130., 1700., 1400., 1350., 2200., 2000., 1800., 1900.,\n",
       "        180.,  330., 2500., 2100., 3000., 2800., 3400.,   50.,   40.,\n",
       "       1250., 3500., 4000., 2400., 2600., 1450.,   70., 3200.,  560.,\n",
       "        240.,  360., 6000., 1050., 2300., 4100.,  120., 5000., 3700.,\n",
       "       1650., 2700., 4500.])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_comma(value):\n",
    "    value = str(value)\n",
    "    if ',' in value:\n",
    "        value = value.replace(',', '')\n",
    "        return float(value)\n",
    "    else:\n",
    "        return float(value)\n",
    "    \n",
    "df['Cost_for_2people'] = df['Cost_for_2people'].apply(remove_comma)\n",
    "df['Cost_for_2people'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a999b38e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:40.289791Z",
     "iopub.status.busy": "2024-08-31T09:43:40.289358Z",
     "iopub.status.idle": "2024-08-31T09:43:40.305414Z",
     "shell.execute_reply": "2024-08-31T09:43:40.304331Z"
    },
    "papermill": {
     "duration": 0.033799,
     "end_time": "2024-08-31T09:43:40.308019",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.274220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>Cost_for_2people</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1</td>\n",
       "      <td>775</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>North Indian, Mughlai, Chinese</td>\n",
       "      <td>800.0</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1</td>\n",
       "      <td>787</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>Chinese, North Indian, Thai</td>\n",
       "      <td>800.0</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>918</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>others</td>\n",
       "      <td>Cafe, Mexican, Italian</td>\n",
       "      <td>800.0</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7</td>\n",
       "      <td>88</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>South Indian, North Indian</td>\n",
       "      <td>300.0</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>166</td>\n",
       "      <td>Basavanagudi</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>North Indian, Rajasthani</td>\n",
       "      <td>600.0</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table  rate  votes      location  \\\n",
       "0                  Jalsa          Yes        Yes   4.1    775  Banashankari   \n",
       "1         Spice Elephant          Yes         No   4.1    787  Banashankari   \n",
       "2        San Churro Cafe          Yes         No   3.8    918  Banashankari   \n",
       "3  Addhuri Udupi Bhojana           No         No   3.7     88  Banashankari   \n",
       "4          Grand Village           No         No   3.8    166  Basavanagudi   \n",
       "\n",
       "       rest_type                        cuisines  Cost_for_2people    Type  \n",
       "0  Casual Dining  North Indian, Mughlai, Chinese             800.0  Buffet  \n",
       "1  Casual Dining     Chinese, North Indian, Thai             800.0  Buffet  \n",
       "2         others          Cafe, Mexican, Italian             800.0  Buffet  \n",
       "3    Quick Bites      South Indian, North Indian             300.0  Buffet  \n",
       "4  Casual Dining        North Indian, Rajasthani             600.0  Buffet  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52587e99",
   "metadata": {
    "papermill": {
     "duration": 0.066324,
     "end_time": "2024-08-31T09:43:40.388300",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.321976",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5. Cleaning 'cuisines' column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f1407620",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:40.418073Z",
     "iopub.status.busy": "2024-08-31T09:43:40.417662Z",
     "iopub.status.idle": "2024-08-31T09:43:40.430050Z",
     "shell.execute_reply": "2024-08-31T09:43:40.428928Z"
    },
    "papermill": {
     "duration": 0.029766,
     "end_time": "2024-08-31T09:43:40.432248",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.402482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cuisines\n",
       "North Indian                                                  1602\n",
       "North Indian, Chinese                                         1401\n",
       "South Indian                                                   902\n",
       "Bakery, Desserts                                               471\n",
       "Biryani                                                        429\n",
       "                                                              ... \n",
       "Bakery, Fast Food, Burger, Rolls, Beverages                      1\n",
       "Fast Food, Kerala, Mangalorean, Seafood, South Indian            1\n",
       "Pizza, American                                                  1\n",
       "North Indian, South Indian, Chinese, Desserts, Street Food       1\n",
       "North Indian, Chinese, Arabian, Momos                            1\n",
       "Name: count, Length: 2487, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['cuisines'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "24267cf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:40.462324Z",
     "iopub.status.busy": "2024-08-31T09:43:40.461950Z",
     "iopub.status.idle": "2024-08-31T09:43:40.475819Z",
     "shell.execute_reply": "2024-08-31T09:43:40.474734Z"
    },
    "papermill": {
     "duration": 0.031585,
     "end_time": "2024-08-31T09:43:40.478180",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.446595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cuisines\n",
       "Cafe, Desserts                                                99\n",
       "North Indian, Fast Food                                       98\n",
       "Bakery, Fast Food                                             98\n",
       "North Indian, Chinese, South Indian                           94\n",
       "North Indian, Continental                                     91\n",
       "                                                              ..\n",
       "Bakery, Fast Food, Burger, Rolls, Beverages                    1\n",
       "Fast Food, Kerala, Mangalorean, Seafood, South Indian          1\n",
       "Pizza, American                                                1\n",
       "North Indian, South Indian, Chinese, Desserts, Street Food     1\n",
       "North Indian, Chinese, Arabian, Momos                          1\n",
       "Name: count, Length: 2442, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cuisines = df['cuisines'].value_counts(ascending  = False)\n",
    "cuisines_lessthan100 = cuisines[cuisines<100]\n",
    "cuisines_lessthan100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18c37be3",
   "metadata": {
    "papermill": {
     "duration": 0.014951,
     "end_time": "2024-08-31T09:43:40.507790",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.492839",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Group all 'cuisines' values with a frequency of less than 1000 into one category named \"others\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0e575270",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:40.537949Z",
     "iopub.status.busy": "2024-08-31T09:43:40.537537Z",
     "iopub.status.idle": "2024-08-31T09:43:40.604433Z",
     "shell.execute_reply": "2024-08-31T09:43:40.603189Z"
    },
    "papermill": {
     "duration": 0.084755,
     "end_time": "2024-08-31T09:43:40.606821",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.522066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cuisines\n",
       "others                                              18965\n",
       "North Indian                                         1602\n",
       "North Indian, Chinese                                1401\n",
       "South Indian                                          902\n",
       "Bakery, Desserts                                      471\n",
       "Biryani                                               429\n",
       "South Indian, North Indian, Chinese                   414\n",
       "Cafe                                                  405\n",
       "Desserts                                              377\n",
       "Fast Food                                             374\n",
       "Ice Cream, Desserts                                   289\n",
       "Chinese                                               285\n",
       "Bakery                                                276\n",
       "Mithai, Street Food                                   237\n",
       "Chinese, North Indian                                 217\n",
       "North Indian, Chinese, Biryani                        201\n",
       "Desserts, Ice Cream                                   195\n",
       "Finger Food                                           193\n",
       "Desserts, Beverages                                   182\n",
       "North Indian, South Indian                            180\n",
       "North Indian, South Indian, Chinese                   170\n",
       "South Indian, North Indian                            163\n",
       "Chinese, Momos                                        162\n",
       "Biryani, North Indian                                 154\n",
       "Street Food                                           152\n",
       "Beverages, Fast Food                                  148\n",
       "North Indian, Biryani                                 148\n",
       "Cafe, Fast Food                                       148\n",
       "North Indian, Mughlai                                 143\n",
       "Burger, Fast Food                                     142\n",
       "South Indian, North Indian, Chinese, Street Food      138\n",
       "Cafe, Continental                                     123\n",
       "Biryani, Kebab                                        123\n",
       "Desserts, Bakery                                      122\n",
       "Kerala                                                122\n",
       "Pizza, Fast Food                                      120\n",
       "South Indian, Chinese                                 115\n",
       "Chinese, Thai                                         115\n",
       "Fast Food, Rolls                                      114\n",
       "South Indian, Biryani                                 111\n",
       "Biryani, North Indian, Chinese                        111\n",
       "Continental                                           109\n",
       "Beverages                                             104\n",
       "Pizza                                                 104\n",
       "Ice Cream                                             102\n",
       "North Indian, Chinese, Fast Food                      100\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def handle_cuisines(value):\n",
    "    if(value in cuisines_lessthan100):\n",
    "        return 'others'\n",
    "    else:\n",
    "        return value\n",
    "        \n",
    "df['cuisines'] = df['cuisines'].apply(handle_cuisines)\n",
    "df['cuisines'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "df733f0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:40.637407Z",
     "iopub.status.busy": "2024-08-31T09:43:40.636905Z",
     "iopub.status.idle": "2024-08-31T09:43:40.653348Z",
     "shell.execute_reply": "2024-08-31T09:43:40.652123Z"
    },
    "papermill": {
     "duration": 0.034361,
     "end_time": "2024-08-31T09:43:40.655611",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.621250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>location</th>\n",
       "      <th>rest_type</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>Cost_for_2people</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jalsa</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4.1</td>\n",
       "      <td>775</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>others</td>\n",
       "      <td>800.0</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Spice Elephant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4.1</td>\n",
       "      <td>787</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>others</td>\n",
       "      <td>800.0</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Churro Cafe</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>918</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>others</td>\n",
       "      <td>others</td>\n",
       "      <td>800.0</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addhuri Udupi Bhojana</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.7</td>\n",
       "      <td>88</td>\n",
       "      <td>Banashankari</td>\n",
       "      <td>Quick Bites</td>\n",
       "      <td>South Indian, North Indian</td>\n",
       "      <td>300.0</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Village</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.8</td>\n",
       "      <td>166</td>\n",
       "      <td>Basavanagudi</td>\n",
       "      <td>Casual Dining</td>\n",
       "      <td>others</td>\n",
       "      <td>600.0</td>\n",
       "      <td>Buffet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    name online_order book_table  rate  votes      location  \\\n",
       "0                  Jalsa          Yes        Yes   4.1    775  Banashankari   \n",
       "1         Spice Elephant          Yes         No   4.1    787  Banashankari   \n",
       "2        San Churro Cafe          Yes         No   3.8    918  Banashankari   \n",
       "3  Addhuri Udupi Bhojana           No         No   3.7     88  Banashankari   \n",
       "4          Grand Village           No         No   3.8    166  Basavanagudi   \n",
       "\n",
       "       rest_type                    cuisines  Cost_for_2people    Type  \n",
       "0  Casual Dining                      others             800.0  Buffet  \n",
       "1  Casual Dining                      others             800.0  Buffet  \n",
       "2         others                      others             800.0  Buffet  \n",
       "3    Quick Bites  South Indian, North Indian             300.0  Buffet  \n",
       "4  Casual Dining                      others             600.0  Buffet  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd77e5f9",
   "metadata": {
    "papermill": {
     "duration": 0.014448,
     "end_time": "2024-08-31T09:43:40.684569",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.670121",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 6. Cleaning 'Type' column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4f35f073",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:40.716155Z",
     "iopub.status.busy": "2024-08-31T09:43:40.715767Z",
     "iopub.status.idle": "2024-08-31T09:43:40.726925Z",
     "shell.execute_reply": "2024-08-31T09:43:40.725779Z"
    },
    "papermill": {
     "duration": 0.029739,
     "end_time": "2024-08-31T09:43:40.729331",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.699592",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Type\n",
       "Delivery              14159\n",
       "Dine-out              11354\n",
       "Desserts               2117\n",
       "Cafes                  1184\n",
       "Drinks & nightlife      894\n",
       "Buffet                  665\n",
       "Pubs and bars           585\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Type'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37c048b2",
   "metadata": {
    "papermill": {
     "duration": 0.015221,
     "end_time": "2024-08-31T09:43:40.759661",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.744440",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Visualizations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5acce2ff",
   "metadata": {
    "papermill": {
     "duration": 0.014376,
     "end_time": "2024-08-31T09:43:40.788588",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.774212",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 1. Count Plot of Various Locations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5fb48615",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:40.819329Z",
     "iopub.status.busy": "2024-08-31T09:43:40.818948Z",
     "iopub.status.idle": "2024-08-31T09:43:41.513602Z",
     "shell.execute_reply": "2024-08-31T09:43:41.512512Z"
    },
    "papermill": {
     "duration": 0.712807,
     "end_time": "2024-08-31T09:43:41.515962",
     "exception": false,
     "start_time": "2024-08-31T09:43:40.803155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 10))\n",
    "ax = sb.countplot(y=df['location'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9011cea",
   "metadata": {
    "papermill": {
     "duration": 0.015744,
     "end_time": "2024-08-31T09:43:41.547828",
     "exception": false,
     "start_time": "2024-08-31T09:43:41.532084",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2. Visualizing 'online_order'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b5828e17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:41.584756Z",
     "iopub.status.busy": "2024-08-31T09:43:41.584290Z",
     "iopub.status.idle": "2024-08-31T09:43:41.796372Z",
     "shell.execute_reply": "2024-08-31T09:43:41.795098Z"
    },
    "papermill": {
     "duration": 0.233466,
     "end_time": "2024-08-31T09:43:41.798854",
     "exception": false,
     "start_time": "2024-08-31T09:43:41.565388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='online_order', ylabel='count'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (6,6))\n",
    "sb.countplot(x=df['online_order'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44f2c972",
   "metadata": {
    "papermill": {
     "duration": 0.016716,
     "end_time": "2024-08-31T09:43:41.832607",
     "exception": false,
     "start_time": "2024-08-31T09:43:41.815891",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3. Visualizing 'book_table'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "34b788fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:41.868278Z",
     "iopub.status.busy": "2024-08-31T09:43:41.867852Z",
     "iopub.status.idle": "2024-08-31T09:43:42.087999Z",
     "shell.execute_reply": "2024-08-31T09:43:42.086687Z"
    },
    "papermill": {
     "duration": 0.241221,
     "end_time": "2024-08-31T09:43:42.090428",
     "exception": false,
     "start_time": "2024-08-31T09:43:41.849207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='book_table', ylabel='count'>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (6,6))\n",
    "sb.countplot(x=df['book_table'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13200bf8",
   "metadata": {
    "papermill": {
     "duration": 0.016755,
     "end_time": "2024-08-31T09:43:42.124840",
     "exception": false,
     "start_time": "2024-08-31T09:43:42.108085",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 4. Visualizing 'online_order' vs 'rate'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ffc8db16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:42.161243Z",
     "iopub.status.busy": "2024-08-31T09:43:42.160839Z",
     "iopub.status.idle": "2024-08-31T09:43:42.400805Z",
     "shell.execute_reply": "2024-08-31T09:43:42.399683Z"
    },
    "papermill": {
     "duration": 0.260783,
     "end_time": "2024-08-31T09:43:42.403235",
     "exception": false,
     "start_time": "2024-08-31T09:43:42.142452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='online_order', ylabel='rate'>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (6,6))\n",
    "sb.boxplot(x = 'online_order', y = 'rate', data = df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06154f9b",
   "metadata": {
    "papermill": {
     "duration": 0.017241,
     "end_time": "2024-08-31T09:43:42.437855",
     "exception": false,
     "start_time": "2024-08-31T09:43:42.420614",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 5. Visualizing 'book_table' vs 'rate'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "81a6497a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T09:43:42.476194Z",
     "iopub.status.busy": "2024-08-31T09:43:42.475787Z",
     "iopub.status.idle": "2024-08-31T09:43:42.715506Z",
     "shell.execute_reply": "2024-08-31T09:43:42.714440Z"
    },
    "papermill": {
     "duration": 0.262034,
     "end_time": "2024-08-31T09:43:42.717914",
     "exception": false,
     "start_time": "2024-08-31T09:43:42.455880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='book_table', ylabel='rate'>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (6,6))\n",
    "sb.boxplot(x = 'book_table', y = 'rate', data = df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eddad9da",
   "metadata": {
    "papermill": {
     "duration": 0.017923,
     "end_time": "2024-08-31T09:43:42.753643",
     "exception": false,
     "start_time": "2024-08-31T09:43:42.735720",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 153420,
     "sourceId": 352891,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21.890179,
   "end_time": "2024-08-31T09:43:43.492971",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-31T09:43:21.602792",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
